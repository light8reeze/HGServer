<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Runaway.Base</name>
    </assembly>
    <members>
        <member name="T:Runaway.Base.IFactory`1">
            <summary>
            object factory interface
            </summary>
            <typeparam name="T">object type</typeparam>
        </member>
        <member name="M:Runaway.Base.IFactory`1.Initialize">
            <summary>
            Initialization factory
            </summary>
        </member>
        <member name="M:Runaway.Base.IFactory`1.CreateObject">
            <summary>
            Create new object
            </summary>
            <returns>Created object</returns>
        </member>
        <member name="M:Runaway.Base.IFactory`1.ReturnObject(`0)">
            <summary>
            Return object to factory
            </summary>
            <param name="returnObject">Return object</param>
        </member>
        <member name="M:Runaway.Base.IFactory`1.Close">
            <summary>
            Close factory
            </summary>
        </member>
        <member name="T:Runaway.Base.IGameClient">
            <summary>
            Game client interface
            </summary>
        </member>
        <member name="T:Runaway.Base.IGameSession">
            <summary>
            Network Session interface
            </summary>
        </member>
        <member name="M:Runaway.Base.IGameSession.Initialize">
            <summary>
            Session Initialize
            </summary>
            <returns>Result number of initialization</returns>
        </member>
        <member name="M:Runaway.Base.IGameSession.OnAccept">
            <summary>
            On Session Accept
            </summary>
        </member>
        <member name="M:Runaway.Base.IGameSession.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive Packet Data to session
            </summary>
            <param name="data">Packet buffer</param>
            <param name="start">Start buffer index</param>
            <param name="end">End buffer index</param>
            <returns>Received size</returns>
        </member>
        <member name="M:Runaway.Base.IGameSession.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send Data to session
            </summary>
            <param name="data">Send Packet data</param>
            <param name="start">Send Packet start index</param>
            <param name="end">Send Packet end index</param>
        </member>
        <member name="M:Runaway.Base.IGameSession.Disconnect">
            <summary>
            Disconnect Session
            </summary>
        </member>
        <member name="T:Runaway.Base.SessionBase`1">
            <summary>
            SessionBase class
            </summary>
            <typeparam name="TSocket">network socket class</typeparam>
        </member>
        <member name="F:Runaway.Base.SessionBase`1.socket">
            <summary>
            session socket
            </summary>
        </member>
        <member name="T:Runaway.Base.IOEventArgs">
            <summary>
            Socket IO Event Arguments
            </summary>
        </member>
        <member name="F:Runaway.Base.IOEventArgs.buffer">
            <summary>
            packet buffer
            </summary>
        </member>
        <member name="F:Runaway.Base.IOEventArgs.startIndex">
            <summary>
            buffer Start index
            </summary>
        </member>
        <member name="F:Runaway.Base.IOEventArgs.endIndex">
            <summary>
            buffer end index
            </summary>
        </member>
        <member name="F:Runaway.Base.IOEventArgs.size">
            <summary>
            IO Size
            </summary>
        </member>
        <member name="T:Runaway.Base.OnAcceptedDelegate">
            <summary>
            Accept callback
            </summary>
            <param name="acceptor">acceptor object</param>
        </member>
        <member name="T:Runaway.Base.OnReceivedDelegate">
            <summary>
            receive callback
            </summary>
            <param name="args">receive arguments</param>
            <param name="size">received size</param>
            <param name="result">receive Result</param>
        </member>
        <member name="T:Runaway.Base.OnSendedDelegate">
            <summary>
            send callback
            </summary>
            <param name="args">send IO argunements</param>
            <param name="size">sended size</param>
            <param name="result">send size</param>
        </member>
        <member name="T:Runaway.Base.OnClosedDelegate">
            <summary>
            socket close callback
            </summary>
        </member>
        <member name="T:Runaway.Base.ISocket">
            <summary>
            Socket Interface
            </summary>
        </member>
        <member name="M:Runaway.Base.ISocket.Initialize">
            <summary>
            Initialize socket
            </summary>
            <returns>Result number of initialization</returns>
        </member>
        <member name="M:Runaway.Base.ISocket.Accept(Runaway.Base.ISocket)">
            <summary>
            accept socket
            </summary>
            <returns>
            result number of acception
            </returns>
        </member>
        <member name="M:Runaway.Base.ISocket.Receive(Runaway.Base.IOEventArgs)">
            <summary>
            Receive IO
            </summary>
            <param name="args">Event Arguments</param>
            <returns>Recieved size</returns>
        </member>
        <member name="M:Runaway.Base.ISocket.Send(Runaway.Base.IOEventArgs)">
            <summary>
            Send IO
            </summary>
            <param name="args">Event Arguments</param>
            <returns>Sended size</returns>
        </member>
        <member name="M:Runaway.Base.ISocket.Close">
            <summary>
            Close socket
            </summary>
        </member>
        <member name="P:Runaway.Base.ISocket.OnAccepted">
            <summary>
            On Accepted event
            </summary>
        </member>
        <member name="P:Runaway.Base.ISocket.OnReceived">
            <summary>
            On Received event
            </summary>
        </member>
        <member name="P:Runaway.Base.ISocket.OnSended">
            <summary>
            On Sended event
            </summary>
        </member>
        <member name="P:Runaway.Base.ISocket.OnClosed">
            <summary>
            On Closed event
            </summary>
        </member>
    </members>
</doc>
